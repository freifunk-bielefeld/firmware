#!/bin/sh /etc/rc.common

#This script is run once at startup and is then deleted.

START=99


initial_wifi_setup()
{
	echo "(I) Setup /etc/config/wireless"

	#default SSID
	local ap_ssid="$(uci get freifunk.@settings[0].community).freifunk.net"

	#add batman version to the AdHoc interface SSID
	local ah_ssid=`uci get freifunk.@settings[0].default_ah_ssid`

	#default BSSID
	local ah_bssid=`uci get freifunk.@settings[0].default_ah_bssid`

	#delete all wifi interfaces
	while uci -q delete wireless.@wifi-iface[0]; do :; done

	#test if we can span both Ad-Hoc and Access Point interfaces
	config_wifi() {
		local ds="$1" #device section
		local ah_ok=0 ap_ok=0 #interface status
		local wifi_device=`uci get -q wireless.$ds.device`
		local h n p

		#config_get wifi_device "$ds" device
		[ -z "$wifi_device" ] && wifi_device="$ds"

		echo "(I) Configure wifi device: '$wifi_device'"

		if [ `uci get wireless.$ds.channel` -gt 35 ]; then
			uci set wireless.$ds.channel=36
		else
			uci set wireless.$ds.channel=1
		fi

		uci set wireless.$ds.country=DE
		uci set wireless.$ds.disabled=0

		#remove ap/ah wifi interface entries
		clear_wifi_interfaces() {
			uci delete -q "$h"
			uci delete -q "$n"
			uci delete -q "$p"
		}

		#AdHoc for batman
		add_ah_interface() {
			h=wireless.`uci add wireless wifi-iface`
			uci set $h.device="$wifi_device"
			uci set $h.ifname="${wifi_device}_mesh"
			uci set $h.mode=adhoc
			uci set $h.network="${wifi_device}_mesh"
			uci set $h.ssid="$ah_ssid"
			uci set $h.bssid="$ah_bssid"
			uci set $h.hidden=1

			n=network.`uci get $h.network`
			uci set $n="interface"
			uci set $n.mtu=1406
			uci set $n.proto="batadv"
			uci set $n.mesh="bat0"
		}

		#AccessPoint for clients
		add_ap_interface() {
			p=wireless.`uci add wireless wifi-iface`
			uci set $p.device="$wifi_device"
			uci set $p.ifname="${wifi_device}_freifunk"
			uci set $p.mode=ap
			uci set $p.network=freifunk
			uci set $p.ssid="$ap_ssid"
			uci set $p.encryption="none"
		}

		wifi_restart() {
			echo "(I) Wireless down/up"
			wifi reload
			sleep 5
		}

		check_wifi_interfaces() {
			ip addr list dev "${wifi_device}_mesh" &> /dev/null && ah_ok=1 || ah_ok=0
			ip addr list dev "${wifi_device}_freifunk" &> /dev/null && ap_ok=1 || ap_ok=0
		}

		add_ah_interface
		add_ap_interface
		wifi_restart
		check_wifi_interfaces

		#if not both interfaces work; try only Ad-Hoc
		if [ $ah_ok -eq 0 -o $ap_ok -eq 0 ]; then
			echo "(I) Cannot use AdHoc and AccessPoint mode at the same time - try AdHoc only now."
			clear_wifi_interfaces
			add_ah_interface
			wifi_restart
			check_wifi_interfaces
		fi

		[ $ah_ok -eq 1 ] && echo "(I) Add AdHoc interface for wifi device ${wifi_device}."
		[ $ap_ok -eq 1 ] && echo "(I) Add AccessPoint interface for wifi device ${wifi_device}."

		#ifname not needed anymore
		uci delete -q $h.ifname
		uci delete -q $p.ifname
	}

	config_load wireless
	config_foreach config_wifi wifi-device
}

initial_lan_setup()
{
	local lan_interfaces="$1"
	echo "(I) Setup lan network."

	uci delete -q network.lan
	uci set network.lan="interface"
	uci set network.lan.type="bridge"
	uci set network.lan.ifname="$lan_interfaces"
	uci set network.lan.ipaddr="192.168.133.1"
	uci delete -q network.lan.ip6addr
	uci set network.lan.proto=static
	uci set network.lan.netmask="255.255.255.0"
	uci set network.lan.igmp_snooping="0"
	uci set network.lan.force_link="1"
	uci set network.lan.bridge_empty="1"
}

initial_freifunk_setup()
{
	local freifunk_interfaces="$1" mac="$2"

	echo "(I) Setup freifunk network."

	uci delete -q network.freifunk
	uci set network.freifunk="interface"
	uci set network.freifunk.type="bridge"
	uci set network.freifunk.ifname="$freifunk_interfaces"
	uci set network.freifunk.ipaddr="192.168.132.1"
	uci set network.freifunk.macaddr="$mac"
	uci delete -q network.freifunk.ip6addr
	uci set network.freifunk.proto=static
	uci set network.freifunk.netmask="255.255.255.0"
	uci set network.freifunk.igmp_snooping="0"
	uci set network.freifunk.force_link="1"
	uci set network.freifunk.bridge_empty="1"

	uci set network.freifunk6="interface"
	uci set network.freifunk6.ifname="@freifunk"
	uci set network.freifunk6.proto="dhcpv6"
	uci set network.freifunk6.reqaddress="none" #slaac only
	uci set network.freifunk6.reqprefix="no" #disable dhcpv6 /128 request
}

initial_wan_setup()
{
	local wan_interfaces="$1"
	echo "(I) Setup WAN network."

	uci -q delete network.wan
	uci -q delete network.wan6

	uci set network.wan="interface"
	uci set network.wan.type="bridge"
	uci set network.wan.ifname="$wan_interfaces"
	uci set network.wan.proto="dhcp"
	uci set network.wan.bridge_empty="1"

	uci set network.wan6="interface"
	uci set network.wan6.ifname="@wan"
	uci set network.wan6.proto="dhcpv6"
	#add the default route for wan to table 1
	uci set network.wan6.ip6table="1"

	#use table 1 also for all traffic marked by mark 1 (fastd)
	uci set network.wan6_lookup="rule6"
	uci set network.wan6_lookup.mark="0x01/0x01"
	uci set network.wan6_lookup.lookup="1"

	uci set network.wan6_unreachable="route6"
	uci set network.wan6_unreachable.type="unreachable"
	uci set network.wan6_unreachable.table="1"
	uci set network.wan6_unreachable.target="::/0"
	uci set network.wan6_unreachable.metric="65535"
	uci set network.wan6_unreachable.gateway="::"
	uci set network.wan6_unreachable.interface="loopback"
}

initial_setup()
{
	local version="$1"
	local prefix="fdef:17a0:ffb1:300::/64"

	local wan_interface=$(uci get -q network.wan.ifname)
	echo "(I) WAN interface: '$wan_interface'"

	local lan_interface=$(uci get -q network.lan.ifname)
	echo "(I) LAN interface: '$lan_interface'"

	local ah_ssid="mesh_v"`dmesg | sed -n -r "s/.*compatibility version ([0-9]+).*/\1/p"`
	echo "(I) AdHoc SSID: '$ah_ssid'"

	echo "(I) Set empty root password."
	(echo ""; sleep 1; echo "") | passwd > /dev/null

	#get a unique MAC address to identify the node
	local mac=`cat /sys/class/ieee80211/phy0/macaddress`
	[ -z "$mac" -o "$mac" = "00:11:22:33:44:55" ] && {
		mac=$(ip addr list dev eth0 | awk '/ether/{print $2}')
	}
	#translate to local administered mac
	a=${mac%%:*} #cut out first hex
	a=$((0x$a | 2)) #set second bit to 1
	a=`printf '%02x\n' $a` #convert to hex
	mac="$a:${mac#*:}" #reassemble mac

	echo "(I) MAC: '$mac'"

	echo "(I) Set Prefix and populate /etc/hosts."

	uci set -q network.globals="globals"
	uci set network.globals.ula_prefix="$prefix"
	echo "192.168.132.1 node" >> /etc/hosts

	# ------------------------------------- #
	# F R E I F U N K  S E T U P #
	# ------------------------------------- #

	uci set freifunk.@settings[0].default_ah_ssid="$ah_ssid"
	uci set freifunk.@settings[0].version="$version"

	# ------------------------------------------- #
	# S E T U P  W I R E L E S S #
	# ------------------------------------------- #

	initial_wifi_setup

	# ------------------------------------- #
	# P R I V A T E  S E T U P #
	# ------------------------------------- #

	initial_lan_setup "$lan_interface"

	# ------------------------------------- #
	# P U B L I C  S E T U P #
	# ------------------------------------- #

	initial_freifunk_setup "bat0" "$mac"

	# ------------------------------------- #
	# W A N  S E T U P #
	# ------------------------------------- #

	initial_wan_setup "$wan_interface"

	# ------------------------------------- #
	# B A T M A N  S E T U P #
	# ------------------------------------- #

	echo "(I) Add network sections to add fastd to batman-adv and set MTU."
	local n=network.fastd_mesh
	uci set $n=interface
	uci set $n.ifname=fastd_mesh
	uci set $n.mtu=1406
	uci set $n.proto="batadv"
	uci set $n.mesh="bat0"
	uci set $n.mesh_no_rebroadcast="1"

	#special WR1043v2 switch fixup for the webui
	if [ "$(cat /tmp/sysinfo/model)" = "TP-Link TL-WR1043N/ND v2" ]; then
		uci set network.@switch_vlan[-2].ports="1 2 3 4 0t"
		uci set network.@switch_vlan[-1].ports="5 0t"
		uci set network.lan.ifname="eth1.1"
		uci set network.wan.ifname="eth1.2"
		uci commit network
	fi

	#save defaults for use in the web-ui
	cp /etc/config/network /etc/config/network_defaults

	cat >> /etc/sysctl.conf <<  EOF

# increase neighbor table timings by a factor of 10
net.ipv6.neigh.default.gc_interval=300
net.ipv6.neigh.default.gc_stale_time=600
net.ipv6.neigh.default.base_reachable_time=300
EOF

	echo "(I) Generate a key for fastd."
	local secret=`fastd --generate-key --machine-readable`
	uci set fastd.default.secret="$secret"
	local key=`echo "secret \"$secret\";" | fastd --config - --show-key --machine-readable`
	uci set fastd.default.key="$key"

	uci set system.@system[0].timezone='CET-1CEST,M3.5.0,M10.5.0/3'

	#write everything to flash
	uci commit
}

update_03_to_04()
{
	local prefix="fdef:17a0:ffb1:300::/64"
	local old_cfgs=""

	echo "(I) Copy/delete some files."
	cp /rom/etc/config/autoupdater /etc/config/
	cp /rom/etc/config/dhcp /etc/config/
	cp /rom/etc/config/firewall /etc/config/
	cp /rom/etc/config/uhttpd /etc/config/
	cp /rom/etc/config/batman-adv /etc/config/
	cp /rom/etc/crontabs/root /etc/crontabs/
	cp /rom/etc/firewall.user /etc/
	cp /rom/etc/dnsmasq.conf /etc/
	cp /rom/etc/sysctl.conf /etc/
	cp /rom/etc/profile /etc/
	cp /rom/etc/inittab /etc/
	cp /rom/etc/uhttpd.crt /etc/ 2> /dev/null
	cp /rom/etc/uhttpd.key /etc/ 2> /dev/null
	rm /etc/config/6relayd
	rm /etc/config/simple_tc
	rm -rf /etc/nodogsplash

	echo "(I) Update fastd configuration."
	cp /rom/etc/config/fastd /etc/config/
	local secret=`fastd --generate-key --machine-readable`
	uci set fastd.default.secret="$secret"
	local key=`echo "secret \"$secret\";" | fastd --config - --show-key --machine-readable`
	uci set fastd.default.key="$key"

	#set new ad-hoc SSID
	local ah_ssid="mesh_v"`dmesg | sed -n -r "s/.*compatibility version ([0-9]+).*/\1/p"`
	local mac=$(uci get -q freifunk.@settings[0].mac)
	local wan_proto=$(uci get -q network.wan.proto)
	local wan_ipaddr=$(uci get -q network.wan.ipaddr)
	local wan_gateway=$(uci get -q network.wan.gateway)
	local private_ipaddr=$(uci get -q network.private.ipaddr)
	local private_netmask=$(uci get -q network.private.netmask)

	echo "(I) Set Prefix and populate /etc/hosts."
	uci set -q network.globals="globals"
	uci set network.globals.ula_prefix="$prefix"
	echo "192.168.132.1 node" >> /etc/hosts

	echo "(I) Disable forwarding on br-freifunk/br-lan."
	echo -e "\n#disable forwarding in roder for router-solicitations to be send for these interfaces" >> /etc/sysctl.conf
	echo "net.ipv6.conf.br-freifunk.forwarding=0" >> /etc/sysctl.conf
	echo "net.ipv6.conf.br-lan.forwarding=0" >> /etc/sysctl.conf

	echo "(I) Remove dummy interfaces."
	uci delete -q network.dummy_mesh
	uci delete -q network.dummy_private
	uci delete -q network.dummy_public

	echo "(I) Rebuild public/private/wan sections."
	local ifname=$(uci get -q network.public.ifname)
	initial_freifunk_setup "${ifname/dummy_public/}" "$mac"

	local ifname=$(uci get -q network.private.ifname)
	initial_lan_setup "${ifname/dummy_private/}"

	local ifname=$(uci get -q network.wan.ifname)
	initial_wan_setup "$ifname"

	echo "(I) Remove old private/public sections."
	uci delete -q network.private
	uci delete -q network.public

	wireless_fixup_device() {
		local cfg="$1" type hwmode
		config_get type $cfg "type"
		config_get hwmode $cfg "hwmode"

		uci delete -q wireless.$cfg.ht_capab

		if [ "$hwmode" = "11ng" ]; then
			uci set wireless.$cfg.hwmode="11g"
		fi
	}

	wireless_fixup_iface() {
		local cfg="$1" mode ifname network pif
		config_get mode $cfg "mode"
		config_get ifname $cfg "ifname"
		config_get network $cfg "network"

		uci delete -q wireless.$cfg.ifname

		if [ "$mode" = "adhoc" ]; then
			uci set wireless.$cfg.ssid="$ah_ssid"
			uci set wireless.$cfg.network="$ifname"
			uci set wireless.$cfg.mcast_rate=12000
			uci delete network.$ifname.ifname
		fi

		if [ "$mode" = "ap" ]; then
			if [ "$network" = "public" ]; then
				uci set wireless.$cfg.network="freifunk"
			fi

			if [ "$network" = "private" ]; then
				uci set wireless.$cfg.network="lan"
			fi
		fi

		#remove wireless interface name from bridge 'freifunk'
		pif="$(uci get network.freifunk.ifname)"
		if [ "$pif" != "${pif/$ifname/}" ]; then
			uci set network.freifunk.ifname="${pif/$ifname/}"
		fi

		#remove wireless interface name from bridge 'lan'
		pif="$(uci get network.lan.ifname)"
		if [ "$pif" != "${pif/$ifname/}" ]; then
			uci set network.lan.ifname="${pif/$ifname/}"
		fi
	}

	network_fixup_ifce() {
		local cfg="$1" proto ifname

		config_get proto $cfg "proto"
		config_get ifname $cfg "ifname"

		if [ "$proto" = "batadv" ]; then
			uci delete -q network.$cfg.auto
		fi

		#remove helper config for switch interfaces
		if [ "$proto" = "none" ]; then
			append old_cfgs $cfg
		fi
	}

	network_change_mtu() {
		local cfg="$1" mtu
		config_get mtu $cfg "mtu"

		if [ "$mtu" = "1426" ]; then
			uci set network.$cfg.mtu="1406"
		fi
	}

	network_trim_ifname() {
		local cfg="$1" ifname

		config_get ifname $cfg "ifname"

		trim() { echo $@; }
		uci set network.$cfg.ifname="$(trim $ifname)"
	}

	[ -n "$wan_proto" ] && uci set network.wan.proto="$wan_proto"
	[ -n "$wan_ipaddr" ] && uci set network.wan.ipaddr="$wan_ipaddr"
	[ -n "$wan_gateway" ] && uci set network.wan.gateway="$wan_gateway"

	echo "(I) Update network/wireless settings."
	config_load wireless
	config_foreach wireless_fixup_iface wifi-iface
	config_foreach wireless_fixup_device wifi-device
	uci commit wireless

	config_load network
	config_foreach network_change_mtu interface
	config_foreach network_fixup_ifce interface
	config_foreach network_trim_ifname interface

	echo "(I) Remove obsolete network sections."
	for cfg in $old_cfgs; do
		uci delete network.$cfg
	done

	echo "(I) Preserve previous ipaddr/netmask."
	uci set -q network.lan.ipaddr="$private_ipaddr"
	uci set -q network.lan.netmask="$private_netmask"

	uci commit network

	local switch_name="$(uci get -q network.@switch[0].name)"
	if [ -n "$switch_name" ]; then
		uci set network_defaults.@switch[0].name="$switch_name"

		network_defaults_switch_fixup() {
			local cfg="$1"
			uci set network_defaults.$cfg.device="$switch_name"
		}

		config_load network_defaults
		config_foreach network_defaults_switch_fixup switch_vlan
		uci commit network_defaults
	fi

	echo "(I) Update /etc/config/freifunk"
	local hostname="$(uci get system.@system[0].hostname)"
	local access_from="$(uci get freifunk.@settings[0].config_nets)"
	local default_ap_ssid="$(uci get freifunk.@settings[0].default_ap_ssid)"

	access_from="${access_from/private/lan}"
	access_from="${access_from/public/freifunk}"

	cp /rom/etc/config/freifunk /etc/config/
	cp /rom/etc/config/system /etc/config/

	uci set fastd.default.mtu="1406"
	uci set system.@system[0].hostname="$hostname"
	uci set system.@system[0].timezone='CET-1CEST,M3.5.0,M10.5.0/3'
	uci set freifunk.@settings[0].default_ah_ssid="$ah_ssid"
	uci set freifunk.@settings[0].access_from="$access_from"
	uci set freifunk.@settings[0].default_ap_ssid="$default_ap_ssid"

	uci commit fastd
	uci commit system
	uci commit freifunk
}

update_04_to_041()
{
	rm /etc/dnsmasq.conf
	cp /rom/etc/uhttpd.crt /etc/ 2> /dev/null
	cp /rom/etc/uhttpd.key /etc/ 2> /dev/null

	wireless_fixup_iface() {
		local cfg="$1" mode
		config_get mode $cfg "mode"

		if [ "$mode" = "adhoc" ]; then
			uci delete -q wireless.$cfg.mcast_rate
		fi
	}

	echo "(I) Update network/wireless settings."
	config_load wireless
	config_foreach wireless_fixup_iface wifi-iface
	uci commit wireless
}

update_041_to_042()
{
	cp /rom/etc/uhttpd.crt /etc/ 2> /dev/null
	cp /rom/etc/uhttpd.key /etc/ 2> /dev/null
	cp /rom/etc/config/uhttpd /etc/config/

	local default_ap_ssid="$(uci get freifunk.@settings[0].default_ap_ssid)"

	uci delete -q freifunk.@settings[0].default_ap_ssid
	uci set freifunk.@settings[0].community="${default_ap_ssid%%.*}"
	uci commit freifunk

	uci set network.freifunk6.reqaddress="none"
	uci set network.freifunk6.reqprefix="no"
	uci commit network

	uci delete -q dhcp.@dhcp[0].ra
	uci delete -q dhcp.@dhcp[1].ra
	uci commit dhcp

	sed -i "/#disable forwarding.*/d" /etc/sysctl.conf
	sed -i "/net.ipv6.conf.br-freifunk.forwarding.*/d" /etc/sysctl.conf
	sed -i "/net.ipv6.conf.br-lan.forwarding.*/d" /etc/sysctl.conf

	cat >> /etc/sysctl.conf <<  EOF

# increase neighbor table timings by a factor of 10
net.ipv6.neigh.default.gc_interval=300
net.ipv6.neigh.default.gc_stale_time=600
net.ipv6.neigh.default.base_reachable_time=300
EOF
}

update_042_to_043() {
	cp /rom/etc/uhttpd.crt /etc/ 2> /dev/null
	cp /rom/etc/uhttpd.key /etc/ 2> /dev/null

	local fastd_enabled="$(uci get fastd.default.enabled)"
	local fastd_secret="$(uci get fastd.default.secret)"
	local fastd_key="$(uci get fastd.default.key)"

	cp /rom/etc/config/autoupdater /etc/config/
	cp /rom/etc/config/batman-adv /etc/config/
	cp /rom/etc/config/fastd /etc/config/
	cp /rom/etc/crontabs/root /etc/crontabs/

	uci set network.fastd_mesh.mesh_no_rebroadcast="1"
	uci commit network

	uci set fastd.default.enabled="$fastd_enabled"
	uci set fastd.default.secret="$fastd_secret"
	uci set fastd.default.key="$fastd_key"
	uci commit fastd
}

start()
{
	#Setup the system for the initial Freifunk configuration.
	#This script is only run once and deletes itself at the end.

	exec >/root/freifunk_setup.log 2>&1
	. /lib/functions.sh

	echo "(I) Start freifunk_setup"

	local from_version="$(uci get -q freifunk.@settings[0].version)"
	local to_version="0.4.3"

	echo "(I) Update from '$from_version' to '$to_version'"
	case "$from_version" in
		"0.3" | "0.3.1")
			echo "(I) Apply update."
			update_03_to_04
			update_04_to_041
			update_041_to_042
			;;
		"0.4")
			echo "(I) Apply update."
			update_04_to_041
			update_041_to_042
			;;
		"0.4.1")
			echo "(I) Apply update."
			update_041_to_042
			;;
		"0.4.2")
			echo "(I) Apply update."
			update_042_to_043
			;;
		"")
			echo "(I) Start initial setup."
			initial_setup "$to_version"
			;;
		*)
			echo "(I) No configuration updater set. Only version will be updated."
			;;
	esac

	uci set -q freifunk.@settings[0].version="$to_version"
	uci commit -q freifunk

	/etc/init.d/fastd disable
	/etc/init.d/telnet disable
	/etc/init.d/simple-radvd enable

	#disable and remove this script
	/etc/init.d/freifunk_setup disable
	rm -f /etc/init.d/freifunk_setup

	echo "(I) Done - rebooting now."
	reboot
}
